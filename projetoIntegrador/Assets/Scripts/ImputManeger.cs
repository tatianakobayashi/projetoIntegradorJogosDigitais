//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Plugins/ImputSystem/ImputManeger.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ImputManeger : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ImputManeger()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ImputManeger"",
    ""maps"": [
        {
            ""name"": ""Imputs"",
            ""id"": ""ff6c54bb-fc77-4a11-a24e-4b948aa0673c"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""3c26a284-765f-4548-ac5b-d547a8622420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9d964a7b-1794-48dd-b165-7e6c8d4ad04a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""5a935400-3136-4ad4-b7e8-2eec2b53eae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rigth"",
                    ""type"": ""Button"",
                    ""id"": ""c5ce0514-ba40-4417-a11d-8e096e5b5d94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""f5996ab1-6c36-498f-a60d-2960708acfd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef51697f-c256-451e-ad70-f31015b34461"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b530bc1-90ed-4c81-88a1-36f235cee860"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d9cf44f-468b-4cc4-9f8d-0cc91f538815"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a787464a-97ea-4f3b-af01-92ace40634b2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rigth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d83796a-f504-408d-a5e2-9fdd07df78bd"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Imputs
        m_Imputs = asset.FindActionMap("Imputs", throwIfNotFound: true);
        m_Imputs_Up = m_Imputs.FindAction("Up", throwIfNotFound: true);
        m_Imputs_Down = m_Imputs.FindAction("Down", throwIfNotFound: true);
        m_Imputs_Left = m_Imputs.FindAction("Left", throwIfNotFound: true);
        m_Imputs_Rigth = m_Imputs.FindAction("Rigth", throwIfNotFound: true);
        m_Imputs_Enter = m_Imputs.FindAction("Enter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Imputs
    private readonly InputActionMap m_Imputs;
    private IImputsActions m_ImputsActionsCallbackInterface;
    private readonly InputAction m_Imputs_Up;
    private readonly InputAction m_Imputs_Down;
    private readonly InputAction m_Imputs_Left;
    private readonly InputAction m_Imputs_Rigth;
    private readonly InputAction m_Imputs_Enter;
    public struct ImputsActions
    {
        private @ImputManeger m_Wrapper;
        public ImputsActions(@ImputManeger wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Imputs_Up;
        public InputAction @Down => m_Wrapper.m_Imputs_Down;
        public InputAction @Left => m_Wrapper.m_Imputs_Left;
        public InputAction @Rigth => m_Wrapper.m_Imputs_Rigth;
        public InputAction @Enter => m_Wrapper.m_Imputs_Enter;
        public InputActionMap Get() { return m_Wrapper.m_Imputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ImputsActions set) { return set.Get(); }
        public void SetCallbacks(IImputsActions instance)
        {
            if (m_Wrapper.m_ImputsActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_ImputsActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_ImputsActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_ImputsActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_ImputsActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_ImputsActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_ImputsActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_ImputsActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_ImputsActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_ImputsActionsCallbackInterface.OnLeft;
                @Rigth.started -= m_Wrapper.m_ImputsActionsCallbackInterface.OnRigth;
                @Rigth.performed -= m_Wrapper.m_ImputsActionsCallbackInterface.OnRigth;
                @Rigth.canceled -= m_Wrapper.m_ImputsActionsCallbackInterface.OnRigth;
                @Enter.started -= m_Wrapper.m_ImputsActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_ImputsActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_ImputsActionsCallbackInterface.OnEnter;
            }
            m_Wrapper.m_ImputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Rigth.started += instance.OnRigth;
                @Rigth.performed += instance.OnRigth;
                @Rigth.canceled += instance.OnRigth;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
            }
        }
    }
    public ImputsActions @Imputs => new ImputsActions(this);
    public interface IImputsActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRigth(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
    }
}
